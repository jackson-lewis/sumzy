// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  verified Boolean @default(false)
  reports  Report[]
  customTrackings CustomTracking[]
  accounts   Account[]
  snapshots  NetWorthSnapshot[]
}

model DefaultCategory {
  id           Int          @id @default(autoincrement())
  name         String
  transactions Transaction[]
}

model Category {
  id           Int          @id @default(autoincrement())
  userId       Int
  name         String
  transactions Transaction[]
}

model Transaction {
  id                Int       @id @default(autoincrement())
  userId            Int
  amount            Decimal
  frequency         Frequency
  description       String?
  merchant          Int?
  categoryId        Int?
  defaultCategoryId Int?
  categoryType      CategoryType
  date              DateTime  @default(now())
  category          Category? @relation(fields: [categoryId], references: [id])
  defaultCategory   DefaultCategory? @relation(fields: [defaultCategoryId], references: [id])
}

enum Frequency {
  one_time
  recurring
}

enum CategoryType {
  DEFAULT
  USER
}

model Event {
  id          Int       @id @default(autoincrement())
  aggregateId Int
  eventData   Json
  eventType   EventType
  createdAt   DateTime  @default(now())
}

model Report {
  id              Int      @id @default(autoincrement())
  userId          Int
  tIncome         Int
  tExpense        Int
  tCategories     Json
  compare         Json
  date            DateTime @default(now())
  lastUpdatedDate DateTime @default(now())
  tSurplus        Int
  user            User @relation(fields: [userId], references: [id])
}

enum EventType {
  CREATED
  UPDATED
  DELETED
}

model CustomTracking {
  id          Int       @id @default(autoincrement())
  userId      Int
  name        String
  slug        String
  description String?
  targetAmount Decimal @default(0)
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  customTrackingMetas CustomTrackingMeta[]
}

model CustomTrackingMeta {
  id          Int       @id @default(autoincrement())
  trackId     Int
  amount      Decimal
  date        DateTime  @default(now())
  customTracking CustomTracking @relation(fields: [trackId], references: [id])
}


model Account {
  id         Int                @id @default(autoincrement())
  user       User               @relation(fields: [userId], references: [id])
  userId     Int
  name       String             // e.g., "Santander Bank", "Vanguard ISA", "Nectar"
  isActive   Boolean            @default(true)
  balances   AccountBalance[]
}

model NetWorthSnapshot {
  id         Int                @id @default(autoincrement())
  user       User               @relation(fields: [userId], references: [id])
  userId     Int
  snapshotDate DateTime
  createdAt  DateTime           @default(now())
  balances   AccountBalance[]

  @@unique([userId, snapshotDate])
}

model AccountBalance {
  id                  Int              @id @default(autoincrement())
  netWorthSnapshot    NetWorthSnapshot @relation(fields: [netWorthSnapshotId], references: [id], onDelete: Cascade)
  netWorthSnapshotId  Int
  account             Account          @relation(fields: [accountId], references: [id])
  accountId           Int
  balance             Decimal
}
